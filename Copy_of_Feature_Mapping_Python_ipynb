{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNBZfqUHBhpoLQvJMhUGqfp",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/zhangling297/Substance-Use/blob/master/Copy_of_Feature_Mapping_Python_ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "et-X7y8EnBpM"
      },
      "outputs": [],
      "source": [
        "Title: web scraping data.gov\n",
        "Description: Use beaufulSoup to get details about datasets on data.gov.\n",
        "Created: Ling Zhang"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests # requests is the tool to connect to the website\n",
        "from bs4 import BeautifulSoup # A tool takes all the data and info. from web, making\n",
        "# it easier to organize data from websites.\n",
        "URL = 'https://catalog.data.gov/dataset/' # URL is an address, with the requests, URL will pull the info from the wed.\n",
        "# Link to website we are scraping\n",
        "\n",
        "response = requests.get(URL)\n",
        "soup = BeautifulSoup(response.content, 'lxml') # lxml is a code that website used for computer to generate the website.\n",
        "\n",
        "# Get the titles of each dataset. # Control + U to see the source codes. Control F to put the finder\n",
        "#href\n",
        "#class = dataset.heading\n",
        "\n",
        "# Use a full loop to loop through all titles\n",
        "quotes = soup.find_all(class_ = 'dataset-heading')\n",
        "for title in quotes:\n",
        "\n",
        "  output = title.text.strip() # strip will strip out all the empty spaces\n",
        "  print(output)\n",
        "\n",
        "\n",
        "import requests # requests is the tool to connect to the website\n",
        "from bs4 import BeautifulSoup # A tool takes all the data and info. from web, making\n",
        "# it easier to organize data from websites.\n",
        "URL = 'https://catalog.data.gov/dataset/' # URL is an address, with the requests, URL will pull the info from the wed.\n",
        "# Link to website we are scraping\n",
        "response = requests.get(URL)\n",
        "soup = BeautifulSoup(response.content, 'lxml')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kkJZdKm_nS3N",
        "outputId": "5e3d9671-d674-4930-ed1b-6110bf4ee3c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Electric Vehicle Population Data\n",
            "Crime Data from 2020 to Present\n",
            "National Death Index\n",
            "Supply Chain Greenhouse Gas Emission Factors v1.3 by NAICS-6\n",
            "Harmonized Tariff Schedule of the United States (2025)\n",
            "Dynamic Small Business Search (DSBS)\n",
            "Fruit and Vegetable Prices\n",
            "National Obesity By State\n",
            "Air Quality\n",
            "Motor Vehicle Collisions - Crashes\n",
            "Warehouse and Retail Sales\n",
            "Nutrition, Physical Activity, and Obesity - Behavioral Risk Factor Surveillance System\n",
            "U.S. Chronic Disease Indicators\n",
            "Border Crossing Entry Data\n",
            "National Student Loan Data System\n",
            "Lottery Powerball Winning Numbers: Beginning 2010\n",
            "2011-12 Gifted and Talented Enrollment Estimations\n",
            "Death rates for suicide, by sex, race, Hispanic origin, and age: United States\n",
            "Walkability Index\n",
            "Inventory of Owned and Leased Properties (IOLP)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import requests # requests is the tool to connect to the website\n",
        "from bs4 import BeautifulSoup # A tool takes all the data and info. from web, making\n",
        "# it easier to organize data from websites.\n",
        "URL = 'https://catalog.data.gov/dataset/' # URL is an address, with the requests, URL will pull the info from the wed.\n",
        "# Link to website we are scraping\n",
        "response = requests.get(URL)\n",
        "soup = BeautifulSoup(response.content, 'lxml')\n",
        "\n",
        "# Create a main full loop to loop through dataset details.\n",
        "for dataset in soup.find_all(class_='dataset-content'):\n",
        "  title = dataset.a.text.strip()\n",
        "  source = dataset.p.text.strip('â€”').strip()\n",
        "  source = dataset.p.text[:-2].strip()\n",
        "  description = dataset.find('div',class_='notes')\n",
        "  print(title)\n",
        "  print(source)\n",
        "  print(description.div.text.strip())\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P2J11mYRu9GY",
        "outputId": "8e622bb4-16ed-4198-de1d-33669c9b01ac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Electric Vehicle Population Data\n",
            "State of Washington\n",
            "This dataset shows the Battery Electric Vehicles (BEVs) and Plug-in Hybrid Electric Vehicles (PHEVs) that are currently registered through Washington State Department...\n",
            "Crime Data from 2020 to Present\n",
            "City of Los Angeles\n",
            "Starting on March 7th, 2024, the Los Angeles Police Department (LAPD) will adopt a new Records Management System for reporting crimes and arrests. This new system is...\n",
            "National Death Index\n",
            "U.S. Department of Health & Human Services\n",
            "The National Death Index (NDI) is a centralized database of death record information on file in state vital statistics offices. Working with these state offices, the...\n",
            "Supply Chain Greenhouse Gas Emission Factors v1.3 by NAICS-6\n",
            "U.S. Environmental Protection Agency\n",
            "The datasets comprise greenhouse gas (GHG) emission factors (Factors) for 1,016 U.S. commodities as defined by the 2017 version of the North American Industry...\n",
            "Harmonized Tariff Schedule of the United States (2025)\n",
            "US International Trade Commission\n",
            "This dataset is the current 2025 Harmonized Tariff Schedule plus all revisions for the current year. It provides the applicable tariff rates and statistical...\n",
            "Dynamic Small Business Search (DSBS)\n",
            "Small Business Administration\n",
            "The Small Business Administration maintains the Dynamic Small Business Search (DSBS) database. As a small business registers in the System for Award Management, there...\n",
            "Fruit and Vegetable Prices\n",
            "Department of Agriculture\n",
            "How much do fruits and vegetables cost? ERS estimated average prices for 153 commonly consumed fresh and processed fruits and vegetables.\n",
            "National Obesity By State\n",
            "Lake County, Illinois\n",
            "National Obesity Percentages by State. Explanation of Field Attributes:Obesity - The percent of the state population that is considered obese from the 2015 CDC BRFSS...\n",
            "Air Quality\n",
            "City of New York\n",
            "Dataset contains information on New York City air quality surveillance data. Air pollution is one of the most important environmental threats to urban populations...\n",
            "Motor Vehicle Collisions - Crashes\n",
            "City of New York\n",
            "The Motor Vehicle Collisions crash table contains details on the crash event. Each row represents a crash event. The Motor Vehicle Collisions data tables contain...\n",
            "Warehouse and Retail Sales\n",
            "Montgomery County of Maryland\n",
            "This dataset contains a list of sales and movement data by item and department appended monthly. Update Frequency : Monthly\n",
            "Nutrition, Physical Activity, and Obesity - Behavioral Risk Factor Surveillance System\n",
            "U.S. Department of Health & Human Services\n",
            "This dataset includes data on adult's diet, physical activity, and weight status from Behavioral Risk Factor Surveillance System. This data is used for DNPAO's Data,...\n",
            "U.S. Chronic Disease Indicators\n",
            "U.S. Department of Health & Human Services\n",
            "CDC's Division of Population Health provides a cross-cutting set of 115 indicators developed by consensus among CDC, the Council of State and Territorial...\n",
            "Border Crossing Entry Data\n",
            "Department of Transportation\n",
            "The Bureau of Transportation Statistics (BTS) Border Crossing Data provide summary statistics for inbound crossings at the U.S.-Canada and the U.S.-Mexico border at...\n",
            "National Student Loan Data System\n",
            "Department of Education\n",
            "The National Student Loan Data System (NSLDS) is the national database of information about loans and grants awarded to students under Title IV of the Higher...\n",
            "Lottery Powerball Winning Numbers: Beginning 2010\n",
            "State of New York\n",
            "Go to http://on.ny.gov/1GpWiHD on the New York Lottery website for past Powerball results and payouts.\n",
            "2011-12 Gifted and Talented Enrollment Estimations\n",
            "Department of Education\n",
            "This Excel file contains data on students enrolled in gifted and talented programs for all states. The file contains three spreadsheets: total students, male...\n",
            "Death rates for suicide, by sex, race, Hispanic origin, and age: United States\n",
            "U.S. Department of Health & Human Services\n",
            "Data on death rates for suicide, by selected population characteristics. Please refer to the PDF or Excel version of this table in the HUS 2019 Data Finder...\n",
            "Walkability Index\n",
            "U.S. Environmental Protection Agency\n",
            "The Walkability Index dataset characterizes every Census 2019 block group in the U.S. based on its relative walkability. Walkability depends upon characteristics of...\n",
            "Inventory of Owned and Leased Properties (IOLP)\n",
            "General Services Administration\n",
            "The Inventory of Owned and Leased Properties (IOLP) allows users to search properties owned and leased by the General Services Administration (GSA) across the United...\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "id": "812b31bb",
        "outputId": "2b19cca8-464e-497b-9b41-b03a17b85fac"
      },
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import zipfile\n",
        "import os\n",
        "import requests\n",
        "\n",
        "# Define the Coordinate Reference System (CRS) string for Lambert Equal-Area projection.\n",
        "crs_lambert = \"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\"\n",
        "\n",
        "# Specify the URL and path for the zip file containing the shapefile.\n",
        "zip_file_url = \"https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip\"\n",
        "zip_file_path = \"cb_2018_us_state_20m.zip\"\n",
        "\n",
        "# Create a temporary directory to extract the shapefile.\n",
        "tmp_dir = \"temp_shapefile_dir\" # Using a local directory instead of tempfile for simplicity\n",
        "os.makedirs(tmp_dir, exist_ok=True)\n",
        "\n",
        "# Download the zip file\n",
        "print(f\"Downloading shapefile from {zip_file_url}...\")\n",
        "try:\n",
        "    response = requests.get(zip_file_url, stream=True)\n",
        "    response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "    with open(zip_file_path, 'wb') as f:\n",
        "        for chunk in response.iter_content(chunk_size=8192):\n",
        "            f.write(chunk)\n",
        "    print(\"Download complete.\")\n",
        "\n",
        "    # Unzip the shapefile to the temporary directory.\n",
        "    print(f\"Unzipping {zip_file_path} to {tmp_dir}...\")\n",
        "    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n",
        "        zip_ref.extractall(tmp_dir)\n",
        "    print(\"Unzipping complete.\")\n",
        "\n",
        "    # Construct the full path to the extracted shapefile (.shp file).\n",
        "    shapefile_path = os.path.join(tmp_dir, \"cb_2018_us_state_20m.shp\")\n",
        "\n",
        "    # Read the shapefile into a geopandas DataFrame using gpd.read_file().\n",
        "    print(f\"Reading shapefile from {shapefile_path}...\")\n",
        "    shapefile_data = gpd.read_file(shapefile_path)\n",
        "\n",
        "    # Filter out the specified states (territories) from the geopandas DataFrame based on their 'STATEFP'.\n",
        "    states_to_filter = [\"66\", \"69\", \"78\", \"60\"]\n",
        "    shapefile_data_filtered = shapefile_data[~shapefile_data['STATEFP'].isin(states_to_filter)]\n",
        "\n",
        "    # Transform the CRS of the filtered geopandas DataFrame to the defined Lambert projection.\n",
        "    usa = shapefile_data_filtered.to_crs(crs_lambert)\n",
        "    print(\"Shapefile loaded and processed.\")\n",
        "    display(usa.head())\n",
        "\n",
        "except requests.exceptions.RequestException as e:\n",
        "    print(f\"Error downloading the shapefile: {e}\")\n",
        "    usa = None\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: The zip file '{zip_file_path}' was not found after download (check download path).\")\n",
        "    usa = None\n",
        "except zipfile.BadZipFile:\n",
        "    print(f\"Error: The downloaded file '{zip_file_path}' is not a valid zip file.\")\n",
        "    usa = None\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred during shapefile processing: {e}\")\n",
        "    usa = None\n",
        "\n",
        "\n",
        "# Load the 'feature_importance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "# Load the 'model_performance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "# IMPORTANT: Replace the placeholder paths with the actual public URLs for your CSV files.\n",
        "feature_importance_csv_url = \"YOUR_FEATURE_IMPORTANCE_CSV_URL\" # Replace with actual URL\n",
        "model_performance_csv_url = \"YOUR_MODEL_PERFORMANCE_CSV_URL\"   # Replace with actual URL\n",
        "\n",
        "imp = None\n",
        "perf = None\n",
        "\n",
        "try:\n",
        "    print(f\"Loading feature importance CSV from {feature_importance_csv_url}...\")\n",
        "    imp = pd.read_csv(feature_importance_csv_url)\n",
        "    print(\"Feature importance CSV loaded.\")\n",
        "    display(imp.head())\n",
        "\n",
        "    print(f\"Loading model performance CSV from {model_performance_csv_url}...\")\n",
        "    perf = pd.read_csv(model_performance_csv_url)\n",
        "    print(\"Model performance CSV loaded.\")\n",
        "    display(perf.head())\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error loading CSV files. Please ensure the URLs are correct and the files are publicly accessible. Error: {e}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading shapefile from https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip...\n",
            "Download complete.\n",
            "Unzipping cb_2018_us_state_20m.zip to temp_shapefile_dir...\n",
            "Unzipping complete.\n",
            "Reading shapefile from temp_shapefile_dir/cb_2018_us_state_20m.shp...\n",
            "Shapefile loaded and processed.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b98db5dd-6ea0-40db-a7db-21578a211d67\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b98db5dd-6ea0-40db-a7db-21578a211d67')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b98db5dd-6ea0-40db-a7db-21578a211d67 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b98db5dd-6ea0-40db-a7db-21578a211d67');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-7869793a-e438-4ec8-8e43-801db1718bd4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7869793a-e438-4ec8-8e43-801db1718bd4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-7869793a-e438-4ec8-8e43-801db1718bd4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(f\\\"Error loading CSV files\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading feature importance CSV from YOUR_FEATURE_IMPORTANCE_CSV_URL...\n",
            "Error loading CSV files. Please ensure the URLs are correct and the files are publicly accessible. Error: [Errno 2] No such file or directory: 'YOUR_FEATURE_IMPORTANCE_CSV_URL'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ab68c418"
      },
      "source": [
        "## Convert file saving\n",
        "\n",
        "### Subtask:\n",
        "Convert the R code for saving the plots to local files to Python."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "id": "de663c1d",
        "outputId": "d0999b83-5b4e-4d28-9f15-5b7ff18f4510"
      },
      "source": [
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create the directory for plots if it doesn't exist\n",
        "output_dir = \"updated_model/plots/\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Save the first plot (Top Feature Importance Map)\n",
        "plt.figure(fig1.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_top_local_features2.png\"), dpi=300)\n",
        "plt.close(fig1) # Close the figure to free memory\n",
        "\n",
        "# Save the second plot (AUC Improvement Map)\n",
        "plt.figure(fig2.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_auc_improvement.png\"), dpi=300)\n",
        "plt.close(fig2) # Close the figure to free memory\n",
        "\n",
        "# Save the third plot (Ranked-Biased Overlap Map)\n",
        "plt.figure(fig3.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_rbo.png\"), dpi=300)\n",
        "plt.close(fig3) # Close the figure to free memory"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 0 Axes>"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "10bcdc16"
      },
      "source": [
        "## Convert data loading and preparation retry\n",
        "\n",
        "### Subtask:\n",
        "Translate the R code for loading and preparing the shapefile and CSV data to Python using libraries like `geopandas` and `pandas`.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7eeaf450"
      },
      "source": [
        "**Reasoning**:\n",
        "The previous attempt failed because the specified shapefile zip file was not found. To proceed with the data loading and preparation subtask, I need to ensure the shapefile and CSV files are accessible. I will first list the files in the working directory to confirm their presence and then retry the code block to load and process the dataframes, including reading the shapefile and CSVs and performing the specified filtering and CRS transformation.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 842
        },
        "id": "82de5a1d",
        "outputId": "2cfc6441-07c2-49ea-c08d-2f4c4f409e07"
      },
      "source": [
        "# Check for the existence of the files\n",
        "print(\"Files in the current directory:\")\n",
        "print(os.listdir())\n",
        "# Remove the line attempting to list files in the non-existent directory\n",
        "# print(\"\\nFiles in the updated_model/csv directory:\")\n",
        "# print(os.listdir('updated_model/csv'))\n",
        "\n",
        "# Define the Coordinate Reference System (CRS) string for Lambert Equal-Area projection.\n",
        "crs_lambert = \"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\"\n",
        "\n",
        "# Specify the path to the zip file containing the shapefile.\n",
        "zip_file_path = \"cb_2018_us_state_20m.zip\"\n",
        "\n",
        "# Create a temporary directory to extract the shapefile.\n",
        "tmp_dir = \"temp_shapefile_dir\" # Using a local directory instead of tempfile for simplicity\n",
        "os.makedirs(tmp_dir, exist_ok=True)\n",
        "\n",
        "# Unzip the shapefile to the temporary directory.\n",
        "# Assuming the zip file is already downloaded based on previous successful steps\n",
        "try:\n",
        "    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n",
        "        zip_ref.extractall(tmp_dir)\n",
        "    print(f\"Unzipped {zip_file_path} to {tmp_dir}\")\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: The zip file '{zip_file_path}' was not found. Please ensure it's in the correct directory.\")\n",
        "    # Handle the error or exit if the zip file is crucial\n",
        "    # For now, we'll just print an error and continue, assuming the unzipped files might be present from a previous run\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred during unzipping: {e}\")\n",
        "\n",
        "\n",
        "# Construct the full path to the extracted shapefile (.shp file).\n",
        "shapefile_path = os.path.join(tmp_dir, \"cb_2018_us_state_20m.shp\")\n",
        "\n",
        "# Read the shapefile into a geopandas DataFrame using gpd.read_file().\n",
        "try:\n",
        "    shapefile_data = gpd.read_file(shapefile_path)\n",
        "\n",
        "    # Filter out the specified states (territories) from the geopandas DataFrame based on their 'STATEFP'.\n",
        "    states_to_filter = [\"66\", \"69\", \"78\", \"60\"]\n",
        "    shapefile_data_filtered = shapefile_data[~shapefile_data['STATEFP'].isin(states_to_filter)]\n",
        "\n",
        "    # Transform the CRS of the filtered geopandas DataFrame to the defined Lambert projection.\n",
        "    usa = shapefile_data_filtered.to_crs(crs_lambert)\n",
        "    print(\"Shapefile loaded and processed.\")\n",
        "    display(usa.head())\n",
        "\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: The shapefile '{shapefile_path}' was not found. Please ensure the zip file was unzipped correctly.\")\n",
        "    usa = None\n",
        "except Exception as e:\n",
        "    print(f\"An error occurred during shapefile processing: {e}\")\n",
        "    usa = None\n",
        "\n",
        "\n",
        "# Load the 'feature_importance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "feature_importance_csv_path = '/content/feature_importance_by_state.csv'\n",
        "imp = pd.read_csv(feature_importance_csv_path)\n",
        "\n",
        "# Load the 'model_performance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "model_performance_csv_path = '/content/model_performance_by_state.csv'\n",
        "perf = pd.read_csv(model_performance_csv_path)\n",
        "\n",
        "# Display the first few rows of the created dataframes to verify\n",
        "display(usa.head())\n",
        "display(imp.head())\n",
        "display(perf.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Files in the current directory:\n",
            "['.config', 'cb_2018_us_state_20m.zip', 'model_performance_by_state.csv', 'feature_importance_by_state.csv', 'updated_model', 'temp_shapefile_dir', 'sample_data']\n",
            "Unzipped cb_2018_us_state_20m.zip to temp_shapefile_dir\n",
            "Shapefile loaded and processed.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3c3fc82c-1dbc-458f-9e8c-443d2de91400\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c3fc82c-1dbc-458f-9e8c-443d2de91400')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3c3fc82c-1dbc-458f-9e8c-443d2de91400 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3c3fc82c-1dbc-458f-9e8c-443d2de91400');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-68ddc15a-89fd-484c-9710-72f1a674f270\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68ddc15a-89fd-484c-9710-72f1a674f270')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-68ddc15a-89fd-484c-9710-72f1a674f270 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(perf\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0d5f368-2a9a-43f5-9bf4-053cfd0f2e51\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0d5f368-2a9a-43f5-9bf4-053cfd0f2e51')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0d5f368-2a9a-43f5-9bf4-053cfd0f2e51 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0d5f368-2a9a-43f5-9bf4-053cfd0f2e51');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-1d251635-4818-455b-b209-bd7dab8e069f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d251635-4818-455b-b209-bd7dab8e069f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-1d251635-4818-455b-b209-bd7dab8e069f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(perf\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    Feature  Importance                      Feature_Name    state\n",
              "0    stfips    0.000000                             State  Alabama\n",
              "1       age    0.056817                               Age  Alabama\n",
              "2  services    0.928294                      Service Type  Alabama\n",
              "3      sub1    0.043325    Primary Substance at Admission  Alabama\n",
              "4      sub2    0.054353  Secondary Substance at Admission  Alabama"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e120adc-38a7-4308-a3b4-cb9b55ab2b6d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Feature</th>\n",
              "      <th>Importance</th>\n",
              "      <th>Feature_Name</th>\n",
              "      <th>state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>stfips</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>State</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>age</td>\n",
              "      <td>0.056817</td>\n",
              "      <td>Age</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>services</td>\n",
              "      <td>0.928294</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>sub1</td>\n",
              "      <td>0.043325</td>\n",
              "      <td>Primary Substance at Admission</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>sub2</td>\n",
              "      <td>0.054353</td>\n",
              "      <td>Secondary Substance at Admission</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e120adc-38a7-4308-a3b4-cb9b55ab2b6d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e120adc-38a7-4308-a3b4-cb9b55ab2b6d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e120adc-38a7-4308-a3b4-cb9b55ab2b6d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e5568c96-033d-48fd-abf3-2115d69eb8bb\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e5568c96-033d-48fd-abf3-2115d69eb8bb')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e5568c96-033d-48fd-abf3-2115d69eb8bb button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(perf\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"age\",\n          \"sub2\",\n          \"services\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3985292350240678,\n        \"min\": 0.0,\n        \"max\": 0.9282935647869096,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0568165572097304,\n          0.0543530420632279,\n          0.9282935647869096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Age\",\n          \"Secondary Substance at Admission\",\n          \"Service Type\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Alabama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      state  global_auc  local_auc       rbo\n",
              "0   Alabama    0.908980   0.937769  0.490595\n",
              "1   Alabama    0.908980   0.937769  0.490595\n",
              "2    Alaska    0.917271   0.921667  0.663492\n",
              "3   Arizona    0.781739   0.797550  0.327698\n",
              "4  Arkansas    0.798428   0.860411  0.569365"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d5ed4f93-a5c6-43e4-aa4b-938423edd610\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>global_auc</th>\n",
              "      <th>local_auc</th>\n",
              "      <th>rbo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>0.908980</td>\n",
              "      <td>0.937769</td>\n",
              "      <td>0.490595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>0.908980</td>\n",
              "      <td>0.937769</td>\n",
              "      <td>0.490595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Alaska</td>\n",
              "      <td>0.917271</td>\n",
              "      <td>0.921667</td>\n",
              "      <td>0.663492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Arizona</td>\n",
              "      <td>0.781739</td>\n",
              "      <td>0.797550</td>\n",
              "      <td>0.327698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arkansas</td>\n",
              "      <td>0.798428</td>\n",
              "      <td>0.860411</td>\n",
              "      <td>0.569365</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d5ed4f93-a5c6-43e4-aa4b-938423edd610')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d5ed4f93-a5c6-43e4-aa4b-938423edd610 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d5ed4f93-a5c6-43e4-aa4b-938423edd610');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-827a5b52-65d3-4d57-9765-ba11bd9344a4\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-827a5b52-65d3-4d57-9765-ba11bd9344a4')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-827a5b52-65d3-4d57-9765-ba11bd9344a4 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(perf\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Alaska\",\n          \"Arkansas\",\n          \"Alabama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"global_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06698243686226948,\n        \"min\": 0.7817389201826037,\n        \"max\": 0.917271411670258,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.917271411670258,\n          0.7984283722091943,\n          0.908980294396961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"local_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06120417494001684,\n        \"min\": 0.7975502175181066,\n        \"max\": 0.93776931980057,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9216674765144152,\n          0.8604105381103694,\n          0.93776931980057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rbo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12354893656616957,\n        \"min\": 0.3276984126984127,\n        \"max\": 0.6634920634920635,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6634920634920635,\n          0.5693650793650794,\n          0.4905952380952381\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "31b569a3"
      },
      "source": [
        "## Convert plotting code\n",
        "\n",
        "### Subtask:\n",
        "Translate the R code for generating plots using `ggplot2` to Python using libraries like `matplotlib` and `seaborn`, or potentially `plotly` for interactive plots."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "16b7323a",
        "outputId": "39307214-6263-4e69-9f6c-f9605775358b"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Plot Top Feature Importance Map\n",
        "fig1, ax1 = plt.subplots(1, 1, figsize=(10, 8))\n",
        "plot_data.plot(column='Feature_Name', ax=ax1, legend=True,\n",
        "               legend_kwds={'loc': 'lower left', 'bbox_to_anchor': (0, 0.1), 'ncol': 1})\n",
        "ax1.set_title('Top Feature Importance (Local Models)')\n",
        "ax1.set_axis_off()\n",
        "plt.show()\n",
        "\n",
        "# Plot AUC Improvement Map\n",
        "fig2, ax2 = plt.subplots(1, 1, figsize=(10, 8))\n",
        "perf_plot_data.plot(column='diff', ax=ax2, legend=True,\n",
        "                    cmap='RdBu',  # Red-Blue colormap for divergence\n",
        "                    legend_kwds={'label': \"AUC\\nImprovement\", 'orientation': \"horizontal\"})\n",
        "ax2.set_title('AUC Improvement From Local Models')\n",
        "ax2.set_axis_off()\n",
        "plt.show()\n",
        "\n",
        "# Plot Ranked-Biased Overlap Feature Importance\n",
        "fig3, ax3 = plt.subplots(1, 1, figsize=(10, 8))\n",
        "rbo_plot_data.plot(column='rbo', ax=ax3, legend=True,\n",
        "                   cmap='Blues', # Blue colormap for sequential data\n",
        "                   legend_kwds={'label': \"Rank-Biased\\nOverlap\", 'orientation': \"horizontal\"})\n",
        "ax3.set_title('Ranked-Biased Overlap Feature Importance')\n",
        "ax3.set_axis_off()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "88fc3183"
      },
      "source": [
        "## Convert data manipulation and analysis (Continued)\n",
        "\n",
        "### Subtask:\n",
        "Convert the data manipulation and analysis steps, including filtering, transforming spatial data, joining dataframes, grouping, and slicing, from R to Python using libraries like `geopandas` and `pandas`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "12b67224",
        "outputId": "90ba8241-ee6f-43a0-fe66-ef21d94ec990"
      },
      "source": [
        "# Data manipulation and analysis\n",
        "\n",
        "# Get top feature by state\n",
        "imp_grp = imp.sort_values(by=['state', 'Importance'], ascending=[True, False]) \\\n",
        "             .groupby('state') \\\n",
        "             .head(1)\n",
        "\n",
        "# Join shapefile data with feature importance data\n",
        "plot_data = usa.merge(imp_grp, left_on='NAME', right_on='state', how='left')\n",
        "\n",
        "# Calculate the difference in AUC\n",
        "perf['diff'] = perf['local_auc'] - perf['global_auc']\n",
        "\n",
        "# Select relevant columns for performance data\n",
        "perf_plot_data = usa.merge(perf[['state', 'global_auc', 'local_auc', 'diff', 'rbo']],\n",
        "                           left_on='NAME', right_on='state', how='left')\n",
        "\n",
        "# Prepare data for RBO plot\n",
        "rbo_plot_data = usa.merge(perf[['state', 'rbo']], left_on='NAME', right_on='state', how='left')\n",
        "\n",
        "# Display the heads of the new dataframes to verify the operations\n",
        "print(\"Head of imp_grp:\")\n",
        "display(imp_grp.head())\n",
        "\n",
        "print(\"\\nHead of plot_data (for feature importance):\")\n",
        "display(plot_data.head())\n",
        "\n",
        "print(\"\\nHead of perf_plot_data (for AUC difference):\")\n",
        "display(perf_plot_data.head())\n",
        "\n",
        "print(\"\\nHead of rbo_plot_data (for RBO):\")\n",
        "display(rbo_plot_data.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Head of imp_grp:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        Feature  Importance           Feature_Name       state\n",
              "2      services    0.928294           Service Type     Alabama\n",
              "118    services    1.513327           Service Type      Alaska\n",
              "226         idu    0.273907     Injection Drug Use     Arizona\n",
              "234    services    0.342164           Service Type    Arkansas\n",
              "347  los_binned    1.055613  Binned Length of Stay  California"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-972fa668-60f9-4a48-bd12-725018cac529\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Feature</th>\n",
              "      <th>Importance</th>\n",
              "      <th>Feature_Name</th>\n",
              "      <th>state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>services</td>\n",
              "      <td>0.928294</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>services</td>\n",
              "      <td>1.513327</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Alaska</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>226</th>\n",
              "      <td>idu</td>\n",
              "      <td>0.273907</td>\n",
              "      <td>Injection Drug Use</td>\n",
              "      <td>Arizona</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>234</th>\n",
              "      <td>services</td>\n",
              "      <td>0.342164</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Arkansas</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>los_binned</td>\n",
              "      <td>1.055613</td>\n",
              "      <td>Binned Length of Stay</td>\n",
              "      <td>California</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-972fa668-60f9-4a48-bd12-725018cac529')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-972fa668-60f9-4a48-bd12-725018cac529 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-972fa668-60f9-4a48-bd12-725018cac529');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4f419d6f-cc2d-4c16-9cb6-65932ca7055c\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4f419d6f-cc2d-4c16-9cb6-65932ca7055c')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4f419d6f-cc2d-4c16-9cb6-65932ca7055c button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"services\",\n          \"idu\",\n          \"los_binned\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.518279086743832,\n        \"min\": 0.2739069930208073,\n        \"max\": 1.5133273204338529,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.5133273204338529,\n          1.0556126114790343,\n          0.2739069930208073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Service Type\",\n          \"Injection Drug Use\",\n          \"Binned Length of Stay\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Alaska\",\n          \"California\",\n          \"Arizona\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Head of plot_data (for feature importance):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry                Feature  \\\n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...               services   \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...             los_binned   \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...               services   \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  freq_atnd_self_help_d   \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...               services   \n",
              "\n",
              "   Importance                                       Feature_Name         state  \n",
              "0    0.342075                                       Service Type      Maryland  \n",
              "1    0.275322                              Binned Length of Stay          Iowa  \n",
              "2    1.105809                                       Service Type      Delaware  \n",
              "3    0.551882  Attendance at Substance Use Self-Help Groups P...          Ohio  \n",
              "4    0.886764                                       Service Type  Pennsylvania  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d4c5266-3013-471a-b94b-bcc5d249476c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "      <th>Feature</th>\n",
              "      <th>Importance</th>\n",
              "      <th>Feature_Name</th>\n",
              "      <th>state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "      <td>services</td>\n",
              "      <td>0.342075</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Maryland</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "      <td>los_binned</td>\n",
              "      <td>0.275322</td>\n",
              "      <td>Binned Length of Stay</td>\n",
              "      <td>Iowa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "      <td>services</td>\n",
              "      <td>1.105809</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Delaware</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "      <td>freq_atnd_self_help_d</td>\n",
              "      <td>0.551882</td>\n",
              "      <td>Attendance at Substance Use Self-Help Groups P...</td>\n",
              "      <td>Ohio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "      <td>services</td>\n",
              "      <td>0.886764</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Pennsylvania</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d4c5266-3013-471a-b94b-bcc5d249476c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3d4c5266-3013-471a-b94b-bcc5d249476c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3d4c5266-3013-471a-b94b-bcc5d249476c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-0f6b5043-6f90-44a0-92bf-190786bee173\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0f6b5043-6f90-44a0-92bf-190786bee173')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-0f6b5043-6f90-44a0-92bf-190786bee173 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"services\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.35605239655391324,\n        \"min\": 0.2753222619846566,\n        \"max\": 1.1058089962051574,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2753222619846566\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Service Type\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Head of perf_plot_data (for AUC difference):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry         state  \\\n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...      Maryland   \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...          Iowa   \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...      Delaware   \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...          Ohio   \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  Pennsylvania   \n",
              "\n",
              "   global_auc  local_auc      diff       rbo  \n",
              "0    0.859847   0.808674 -0.051173  0.318968  \n",
              "1    0.748746   0.774929  0.026183  0.448413  \n",
              "2    0.938669   0.949657  0.010988  0.566429  \n",
              "3    0.857509   0.871124  0.013616  0.515595  \n",
              "4    0.910920   0.933849  0.022929  0.584643  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9e7d1522-bdc5-413f-a548-36f7a7404074\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "      <th>state</th>\n",
              "      <th>global_auc</th>\n",
              "      <th>local_auc</th>\n",
              "      <th>diff</th>\n",
              "      <th>rbo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>0.859847</td>\n",
              "      <td>0.808674</td>\n",
              "      <td>-0.051173</td>\n",
              "      <td>0.318968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>0.748746</td>\n",
              "      <td>0.774929</td>\n",
              "      <td>0.026183</td>\n",
              "      <td>0.448413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>0.938669</td>\n",
              "      <td>0.949657</td>\n",
              "      <td>0.010988</td>\n",
              "      <td>0.566429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>0.857509</td>\n",
              "      <td>0.871124</td>\n",
              "      <td>0.013616</td>\n",
              "      <td>0.515595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>0.910920</td>\n",
              "      <td>0.933849</td>\n",
              "      <td>0.022929</td>\n",
              "      <td>0.584643</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e7d1522-bdc5-413f-a548-36f7a7404074')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9e7d1522-bdc5-413f-a548-36f7a7404074 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9e7d1522-bdc5-413f-a548-36f7a7404074');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-293f07a6-a28f-4262-9262-a625c46dfae5\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-293f07a6-a28f-4262-9262-a625c46dfae5')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-293f07a6-a28f-4262-9262-a625c46dfae5 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"global_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07265681537729735,\n        \"min\": 0.7487458178170044,\n        \"max\": 0.9386687306501548,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7487458178170044\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"local_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07614923857120692,\n        \"min\": 0.7749290431280559,\n        \"max\": 0.9496571494094712,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7749290431280559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.031758730769298416,\n        \"min\": -0.0511729405346425,\n        \"max\": 0.02618322531105144,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.02618322531105144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rbo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10768493309685702,\n        \"min\": 0.318968253968254,\n        \"max\": 0.5846428571428571,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4484126984126983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Head of rbo_plot_data (for RBO):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry         state       rbo  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...      Maryland  0.318968  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...          Iowa  0.448413  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...      Delaware  0.566429  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...          Ohio  0.515595  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  Pennsylvania  0.584643  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-08bd98ce-84cb-4bd0-8ccc-d102fbb8f8dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "      <th>state</th>\n",
              "      <th>rbo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>0.318968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>0.448413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>0.566429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>0.515595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>0.584643</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-08bd98ce-84cb-4bd0-8ccc-d102fbb8f8dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-08bd98ce-84cb-4bd0-8ccc-d102fbb8f8dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-08bd98ce-84cb-4bd0-8ccc-d102fbb8f8dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-bbb640b8-4e06-462d-960f-72e4e1f412a0\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bbb640b8-4e06-462d-960f-72e4e1f412a0')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-bbb640b8-4e06-462d-960f-72e4e1f412a0 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rbo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10768493309685702,\n        \"min\": 0.318968253968254,\n        \"max\": 0.5846428571428571,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4484126984126983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8cf2e17f"
      },
      "source": [
        "**Reasoning**:\n",
        "The previous command failed because the directory 'updated_model/csv' does not exist, leading to a FileNotFoundError when trying to list its contents and subsequently when trying to read the CSV files from that path. To successfully load the CSV data, I need to identify the correct path to the 'feature_importance_by_state.csv' and 'model_performance_by_state.csv' files based on the available files listed in the kernel. Since 'updated_model/csv' is not found, I will check the root directory and the 'sample_data' directory for the CSV files. I will then modify the code to use the correct file paths and retry loading the data. I will keep the shapefile loading part as is, assuming the shapefile was successfully extracted in the previous attempt based on the presence of 'temp_shapefile_dir'.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 345
        },
        "id": "PsCqxaPngYB7",
        "outputId": "535d3ad7-74d7-4fca-c1a5-fcef17444008"
      },
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import zipfile\n",
        "import os\n",
        "import requests\n",
        "\n",
        "# Define the Coordinate Reference System (CRS) string for Lambert Equal-Area projection.\n",
        "crs_lambert = \"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\"\n",
        "\n",
        "# Specify the URL and path for the zip file containing the shapefile.\n",
        "zip_file_url = \"https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip\"\n",
        "zip_file_path = \"cb_2018_us_state_20m.zip\"\n",
        "\n",
        "# Create a temporary directory to extract the shapefile.\n",
        "tmp_dir = \"temp_shapefile_dir\"\n",
        "os.makedirs(tmp_dir, exist_ok=True)\n",
        "\n",
        "# Download the zip file\n",
        "print(f\"Downloading shapefile from {zip_file_url}...\")\n",
        "try:\n",
        "    response = requests.get(zip_file_url, stream=True)\n",
        "    response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "    with open(zip_file_path, 'wb') as f:\n",
        "        for chunk in response.iter_content(chunk_size=8192):\n",
        "            f.write(chunk)\n",
        "    print(\"Download complete.\")\n",
        "\n",
        "    # Unzip the shapefile to the temporary directory.\n",
        "    print(f\"Unzipping {zip_file_path} to {tmp_dir}...\")\n",
        "    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n",
        "        zip_ref.extractall(tmp_dir)\n",
        "    print(\"Unzipping complete.\")\n",
        "\n",
        "    # Construct the full path to the extracted shapefile (.shp file).\n",
        "    shapefile_path = os.path.join(tmp_dir, \"cb_2018_us_state_20m.shp\")\n",
        "\n",
        "    # Read the shapefile into a geopandas DataFrame using gpd.read_file().\n",
        "    print(f\"Reading shapefile from {shapefile_path}...\")\n",
        "    shapefile_data = gpd.read_file(shapefile_path)\n",
        "\n",
        "    # Filter out the specified states (territories) from the geopandas DataFrame based on their 'STATEFP'.\n",
        "    states_to_filter = [\"66\", \"69\", \"78\", \"60\"]\n",
        "    shapefile_data_filtered = shapefile_data[~shapefile_data['STATEFP'].isin(states_to_filter)]\n",
        "\n",
        "    # Transform the CRS of the filtered geopandas DataFrame to the defined Lambert projection.\n",
        "    usa = shapefile_data_filtered.to_crs(crs_lambert)\n",
        "    print(\"Shapefile loaded and processed.\")\n",
        "    display(usa.head())\n",
        "\n",
        "except requests.exceptions.RequestException as e:\n",
        "    print(f\"Error downloading the shapefile: {e}\")\n",
        "    usa = None\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: The zip file '{zip_file_path}' was not found after download (check download path).\")\n",
        "    usa = None\n",
        "except zipfile.BadZipFile:\n",
        "    print(f\"Error: The downloaded file '{zip_file_path}' is not a valid zip file.\")\n",
        "    usa = None\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred during shapefile processing: {e}\")\n",
        "    usa = None\n",
        "\n",
        "\n",
        "# Load the 'feature_importance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "# Load the 'model_performance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "# IMPORTANT: Replace the placeholder paths with the actual public URLs for your CSV files.\n",
        "feature_importance_csv_url = \"YOUR_FEATURE_IMPORTANCE_CSV_URL\" # Replace with actual URL\n",
        "model_performance_csv_url = \"YOUR_MODEL_PERFORMANCE_CSV_URL\"   # Replace with actual URL\n",
        "\n",
        "imp = None\n",
        "perf = None\n",
        "\n",
        "try:\n",
        "    print(f\"Loading feature importance CSV from {feature_importance_csv_url}...\")\n",
        "    imp = pd.read_csv(feature_importance_csv_url)\n",
        "    print(\"Feature importance CSV loaded.\")\n",
        "    display(imp.head())\n",
        "\n",
        "    print(f\"Loading model performance CSV from {model_performance_csv_url}...\")\n",
        "    perf = pd.read_csv(model_performance_csv_url)\n",
        "    print(\"Model performance CSV loaded.\")\n",
        "    display(perf.head())\n",
        "\n",
        "except Exception as e:\n",
        "    print(f\"Error loading CSV files. Please ensure the URLs are correct and the files are publicly accessible. Error: {e}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading shapefile from https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip...\n",
            "Download complete.\n",
            "Unzipping cb_2018_us_state_20m.zip to temp_shapefile_dir...\n",
            "Unzipping complete.\n",
            "Reading shapefile from temp_shapefile_dir/cb_2018_us_state_20m.shp...\n",
            "Shapefile loaded and processed.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-297ffdcc-ad5c-4d8e-8760-bd8ae5a23248\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-297ffdcc-ad5c-4d8e-8760-bd8ae5a23248')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-297ffdcc-ad5c-4d8e-8760-bd8ae5a23248 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-297ffdcc-ad5c-4d8e-8760-bd8ae5a23248');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-fe2e3b96-67e0-4b51-a32d-d7c4703b43e8\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fe2e3b96-67e0-4b51-a32d-d7c4703b43e8')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-fe2e3b96-67e0-4b51-a32d-d7c4703b43e8 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(f\\\"Error loading CSV files\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading feature importance CSV from YOUR_FEATURE_IMPORTANCE_CSV_URL...\n",
            "Error loading CSV files. Please ensure the URLs are correct and the files are publicly accessible. Error: [Errno 2] No such file or directory: 'YOUR_FEATURE_IMPORTANCE_CSV_URL'\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 757
        },
        "outputId": "03a0a321-d7e4-43ba-d33d-876dc6816541",
        "id": "uDtOz5JXi9U6"
      },
      "source": [
        "import geopandas as gpd\n",
        "import pandas as pd\n",
        "import zipfile\n",
        "import os\n",
        "import requests\n",
        "\n",
        "# Define the Coordinate Reference System (CRS) string for Lambert Equal-Area projection.\n",
        "crs_lambert = \"+proj=laea +lat_0=45 +lon_0=-100 +x_0=0 +y_0=0 +a=6370997 +b=6370997 +units=m +no_defs\"\n",
        "\n",
        "# Specify the URL and path for the zip file containing the shapefile.\n",
        "zip_file_url = \"https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip\"\n",
        "zip_file_path = \"cb_2018_us_state_20m.zip\"\n",
        "\n",
        "# Create a temporary directory to extract the shapefile.\n",
        "tmp_dir = \"temp_shapefile_dir\"\n",
        "os.makedirs(tmp_dir, exist_ok=True)\n",
        "\n",
        "# Download the zip file\n",
        "print(f\"Downloading shapefile from {zip_file_url}...\")\n",
        "try:\n",
        "    response = requests.get(zip_file_url, stream=True)\n",
        "    response.raise_for_status() # Raise an HTTPError for bad responses (4xx or 5xx)\n",
        "    with open(zip_file_path, 'wb') as f:\n",
        "        for chunk in response.iter_content(chunk_size=8192):\n",
        "            f.write(chunk)\n",
        "    print(\"Download complete.\")\n",
        "\n",
        "    # Unzip the shapefile to the temporary directory.\n",
        "    print(f\"Unzipping {zip_file_path} to {tmp_dir}...\")\n",
        "    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n",
        "        zip_ref.extractall(tmp_dir)\n",
        "    print(\"Unzipping complete.\")\n",
        "\n",
        "    # Construct the full path to the extracted shapefile (.shp file).\n",
        "    shapefile_path = os.path.join(tmp_dir, \"cb_2018_us_state_20m.shp\")\n",
        "\n",
        "    # Read the shapefile into a geopandas DataFrame using gpd.read_file().\n",
        "    print(f\"Reading shapefile from {shapefile_path}...\")\n",
        "    shapefile_data = gpd.read_file(shapefile_path)\n",
        "\n",
        "    # Filter out the specified states (territories) from the geopandas DataFrame based on their 'STATEFP'.\n",
        "    states_to_filter = [\"66\", \"69\", \"78\", \"60\"]\n",
        "    shapefile_data_filtered = shapefile_data[~shapefile_data['STATEFP'].isin(states_to_filter)]\n",
        "\n",
        "    # Transform the CRS of the filtered geopandas DataFrame to the defined Lambert projection.\n",
        "    usa = shapefile_data_filtered.to_crs(crs_lambert)\n",
        "    print(\"Shapefile loaded and processed.\")\n",
        "    display(usa.head())\n",
        "\n",
        "except requests.exceptions.RequestException as e:\n",
        "    print(f\"Error downloading the shapefile: {e}\")\n",
        "    usa = None\n",
        "except FileNotFoundError:\n",
        "    print(f\"Error: The zip file '{zip_file_path}' was not found after download (check download path).\")\n",
        "    usa = None\n",
        "except zipfile.BadZipFile:\n",
        "    print(f\"Error: The downloaded file '{zip_file_path}' is not a valid zip file.\")\n",
        "    usa = None\n",
        "except Exception as e:\n",
        "    print(f\"An unexpected error occurred during shapefile processing: {e}\")\n",
        "    usa = None\n",
        "\n",
        "\n",
        "# Load the 'feature_importance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "# Load the 'model_performance_by_state.csv' file into a pandas DataFrame using pd.read_csv().\n",
        "# IMPORTANT: Replace the placeholder paths with the actual public URLs for your CSV files.\n",
        "feature_importance_csv_path = \"/content/feature_importance_by_state.csv\" # Use the correct local path\n",
        "model_performance_csv_path = \"/content/model_performance_by_state.csv\"   # Use the correct local path\n",
        "\n",
        "imp = None\n",
        "perf = None\n",
        "\n",
        "try:\n",
        "    print(f\"Loading feature importance CSV from {feature_importance_csv_path}...\")\n",
        "    imp = pd.read_csv(feature_importance_csv_path)\n",
        "    print(\"Feature importance CSV loaded.\")\n",
        "    display(imp.head())\n",
        "\n",
        "    print(f\"Loading model performance CSV from {model_performance_csv_path}...\")\n",
        "    perf = pd.read_csv(model_performance_csv_path)\n",
        "    print(\"Model performance CSV loaded.\")\n",
        "    display(perf.head())\n",
        "\n",
        "except FileNotFoundError:\n",
        "    print(\"Error: One or both of the CSV files were not found in the expected path.\")\n",
        "except Exception as e:\n",
        "    print(f\"Error loading CSV files: {e}\")"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading shapefile from https://www2.census.gov/geo/tiger/GENZ2018/shp/cb_2018_us_state_20m.zip...\n",
            "Download complete.\n",
            "Unzipping cb_2018_us_state_20m.zip to temp_shapefile_dir...\n",
            "Unzipping complete.\n",
            "Reading shapefile from temp_shapefile_dir/cb_2018_us_state_20m.shp...\n",
            "Shapefile loaded and processed.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-9ad0473e-6357-434f-95cd-372f943ba031\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9ad0473e-6357-434f-95cd-372f943ba031')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-9ad0473e-6357-434f-95cd-372f943ba031 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-9ad0473e-6357-434f-95cd-372f943ba031');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-be1f6e50-2b0c-4d83-8392-ebcad4466468\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-be1f6e50-2b0c-4d83-8392-ebcad4466468')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-be1f6e50-2b0c-4d83-8392-ebcad4466468 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(f\\\"Error loading CSV files: {e}\\\")\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading feature importance CSV from /content/feature_importance_by_state.csv...\n",
            "Feature importance CSV loaded.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "    Feature  Importance                      Feature_Name    state\n",
              "0    stfips    0.000000                             State  Alabama\n",
              "1       age    0.056817                               Age  Alabama\n",
              "2  services    0.928294                      Service Type  Alabama\n",
              "3      sub1    0.043325    Primary Substance at Admission  Alabama\n",
              "4      sub2    0.054353  Secondary Substance at Admission  Alabama"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed11ef15-c325-4f6c-862a-4d9d42e8ef14\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Feature</th>\n",
              "      <th>Importance</th>\n",
              "      <th>Feature_Name</th>\n",
              "      <th>state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>stfips</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>State</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>age</td>\n",
              "      <td>0.056817</td>\n",
              "      <td>Age</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>services</td>\n",
              "      <td>0.928294</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>sub1</td>\n",
              "      <td>0.043325</td>\n",
              "      <td>Primary Substance at Admission</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>sub2</td>\n",
              "      <td>0.054353</td>\n",
              "      <td>Secondary Substance at Admission</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed11ef15-c325-4f6c-862a-4d9d42e8ef14')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed11ef15-c325-4f6c-862a-4d9d42e8ef14 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed11ef15-c325-4f6c-862a-4d9d42e8ef14');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-357b51c9-0b7c-4dd0-b90b-73eb98304705\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-357b51c9-0b7c-4dd0-b90b-73eb98304705')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-357b51c9-0b7c-4dd0-b90b-73eb98304705 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(f\\\"Error loading CSV files: {e}\\\")\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"age\",\n          \"sub2\",\n          \"services\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3985292350240678,\n        \"min\": 0.0,\n        \"max\": 0.9282935647869096,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.0568165572097304,\n          0.0543530420632279,\n          0.9282935647869096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Age\",\n          \"Secondary Substance at Admission\",\n          \"Service Type\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"Alabama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Loading model performance CSV from /content/model_performance_by_state.csv...\n",
            "Model performance CSV loaded.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "      state  global_auc  local_auc       rbo\n",
              "0   Alabama    0.908980   0.937769  0.490595\n",
              "1   Alabama    0.908980   0.937769  0.490595\n",
              "2    Alaska    0.917271   0.921667  0.663492\n",
              "3   Arizona    0.781739   0.797550  0.327698\n",
              "4  Arkansas    0.798428   0.860411  0.569365"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7832f37e-cc71-4ba3-bbe0-cae2a6a4ca26\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>global_auc</th>\n",
              "      <th>local_auc</th>\n",
              "      <th>rbo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>0.908980</td>\n",
              "      <td>0.937769</td>\n",
              "      <td>0.490595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>Alabama</td>\n",
              "      <td>0.908980</td>\n",
              "      <td>0.937769</td>\n",
              "      <td>0.490595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>Alaska</td>\n",
              "      <td>0.917271</td>\n",
              "      <td>0.921667</td>\n",
              "      <td>0.663492</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>Arizona</td>\n",
              "      <td>0.781739</td>\n",
              "      <td>0.797550</td>\n",
              "      <td>0.327698</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>Arkansas</td>\n",
              "      <td>0.798428</td>\n",
              "      <td>0.860411</td>\n",
              "      <td>0.569365</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7832f37e-cc71-4ba3-bbe0-cae2a6a4ca26')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7832f37e-cc71-4ba3-bbe0-cae2a6a4ca26 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7832f37e-cc71-4ba3-bbe0-cae2a6a4ca26');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e3761e2d-8ab9-4934-97ce-73a300817088\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e3761e2d-8ab9-4934-97ce-73a300817088')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e3761e2d-8ab9-4934-97ce-73a300817088 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"    print(f\\\"Error loading CSV files: {e}\\\")\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Alaska\",\n          \"Arkansas\",\n          \"Alabama\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"global_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06698243686226948,\n        \"min\": 0.7817389201826037,\n        \"max\": 0.917271411670258,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.917271411670258,\n          0.7984283722091943,\n          0.908980294396961\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"local_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.06120417494001684,\n        \"min\": 0.7975502175181066,\n        \"max\": 0.93776931980057,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.9216674765144152,\n          0.8604105381103694,\n          0.93776931980057\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rbo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.12354893656616957,\n        \"min\": 0.3276984126984127,\n        \"max\": 0.6634920634920635,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.6634920634920635,\n          0.5693650793650794,\n          0.4905952380952381\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7316501e"
      },
      "source": [
        "## Convert data manipulation and analysis (Continued)\n",
        "\n",
        "### Subtask:\n",
        "Convert the data manipulation and analysis steps, including filtering, transforming spatial data, joining dataframes, grouping, and slicing, from R to Python using libraries like `geopandas` and `pandas`."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "3eb26814",
        "outputId": "cbd9d996-66ae-4490-8bdc-32c3efad1d64"
      },
      "source": [
        "# Data manipulation and analysis\n",
        "\n",
        "# Get top feature by state\n",
        "imp_grp = imp.sort_values(by=['state', 'Importance'], ascending=[True, False]) \\\n",
        "             .groupby('state') \\\n",
        "             .head(1)\n",
        "\n",
        "# Join shapefile data with feature importance data\n",
        "plot_data = usa.merge(imp_grp, left_on='NAME', right_on='state', how='left')\n",
        "\n",
        "# Calculate the difference in AUC\n",
        "perf['diff'] = perf['local_auc'] - perf['global_auc']\n",
        "\n",
        "# Select relevant columns for performance data\n",
        "perf_plot_data = usa.merge(perf[['state', 'global_auc', 'local_auc', 'diff', 'rbo']],\n",
        "                           left_on='NAME', right_on='state', how='left')\n",
        "\n",
        "# Prepare data for RBO plot\n",
        "rbo_plot_data = usa.merge(perf[['state', 'rbo']], left_on='NAME', right_on='state', how='left')\n",
        "\n",
        "# Display the heads of the new dataframes to verify the operations\n",
        "print(\"Head of imp_grp:\")\n",
        "display(imp_grp.head())\n",
        "\n",
        "print(\"\\nHead of plot_data (for feature importance):\")\n",
        "display(plot_data.head())\n",
        "\n",
        "print(\"\\nHead of perf_plot_data (for AUC difference):\")\n",
        "display(perf_plot_data.head())\n",
        "\n",
        "print(\"\\nHead of rbo_plot_data (for RBO):\")\n",
        "display(rbo_plot_data.head())"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Head of imp_grp:\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "        Feature  Importance           Feature_Name       state\n",
              "2      services    0.928294           Service Type     Alabama\n",
              "118    services    1.513327           Service Type      Alaska\n",
              "226         idu    0.273907     Injection Drug Use     Arizona\n",
              "234    services    0.342164           Service Type    Arkansas\n",
              "347  los_binned    1.055613  Binned Length of Stay  California"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1a894dc3-cadb-4d19-a241-82c987518425\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Feature</th>\n",
              "      <th>Importance</th>\n",
              "      <th>Feature_Name</th>\n",
              "      <th>state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>services</td>\n",
              "      <td>0.928294</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Alabama</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>118</th>\n",
              "      <td>services</td>\n",
              "      <td>1.513327</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Alaska</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>226</th>\n",
              "      <td>idu</td>\n",
              "      <td>0.273907</td>\n",
              "      <td>Injection Drug Use</td>\n",
              "      <td>Arizona</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>234</th>\n",
              "      <td>services</td>\n",
              "      <td>0.342164</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Arkansas</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>347</th>\n",
              "      <td>los_binned</td>\n",
              "      <td>1.055613</td>\n",
              "      <td>Binned Length of Stay</td>\n",
              "      <td>California</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a894dc3-cadb-4d19-a241-82c987518425')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1a894dc3-cadb-4d19-a241-82c987518425 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1a894dc3-cadb-4d19-a241-82c987518425');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-eb3910df-62cf-4e86-9ac8-5592a618f646\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb3910df-62cf-4e86-9ac8-5592a618f646')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-eb3910df-62cf-4e86-9ac8-5592a618f646 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"services\",\n          \"idu\",\n          \"los_binned\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.518279086743832,\n        \"min\": 0.2739069930208073,\n        \"max\": 1.5133273204338529,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1.5133273204338529,\n          1.0556126114790343,\n          0.2739069930208073\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Service Type\",\n          \"Injection Drug Use\",\n          \"Binned Length of Stay\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Alaska\",\n          \"California\",\n          \"Arizona\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Head of plot_data (for feature importance):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry                Feature  \\\n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...               services   \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...             los_binned   \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...               services   \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...  freq_atnd_self_help_d   \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...               services   \n",
              "\n",
              "   Importance                                       Feature_Name         state  \n",
              "0    0.342075                                       Service Type      Maryland  \n",
              "1    0.275322                              Binned Length of Stay          Iowa  \n",
              "2    1.105809                                       Service Type      Delaware  \n",
              "3    0.551882  Attendance at Substance Use Self-Help Groups P...          Ohio  \n",
              "4    0.886764                                       Service Type  Pennsylvania  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-438a7cf2-c579-450f-98e1-434d7b8204d6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "      <th>Feature</th>\n",
              "      <th>Importance</th>\n",
              "      <th>Feature_Name</th>\n",
              "      <th>state</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "      <td>services</td>\n",
              "      <td>0.342075</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Maryland</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "      <td>los_binned</td>\n",
              "      <td>0.275322</td>\n",
              "      <td>Binned Length of Stay</td>\n",
              "      <td>Iowa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "      <td>services</td>\n",
              "      <td>1.105809</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Delaware</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "      <td>freq_atnd_self_help_d</td>\n",
              "      <td>0.551882</td>\n",
              "      <td>Attendance at Substance Use Self-Help Groups P...</td>\n",
              "      <td>Ohio</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "      <td>services</td>\n",
              "      <td>0.886764</td>\n",
              "      <td>Service Type</td>\n",
              "      <td>Pennsylvania</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-438a7cf2-c579-450f-98e1-434d7b8204d6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-438a7cf2-c579-450f-98e1-434d7b8204d6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-438a7cf2-c579-450f-98e1-434d7b8204d6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-e8bc9b83-f5f1-443b-80a9-7d413328fcea\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e8bc9b83-f5f1-443b-80a9-7d413328fcea')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-e8bc9b83-f5f1-443b-80a9-7d413328fcea button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"services\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Importance\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.35605239655391324,\n        \"min\": 0.2753222619846566,\n        \"max\": 1.1058089962051574,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.2753222619846566\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Feature_Name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Service Type\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Head of perf_plot_data (for AUC difference):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry         state  \\\n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...      Maryland   \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...          Iowa   \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...      Delaware   \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...          Ohio   \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  Pennsylvania   \n",
              "\n",
              "   global_auc  local_auc      diff       rbo  \n",
              "0    0.859847   0.808674 -0.051173  0.318968  \n",
              "1    0.748746   0.774929  0.026183  0.448413  \n",
              "2    0.938669   0.949657  0.010988  0.566429  \n",
              "3    0.857509   0.871124  0.013616  0.515595  \n",
              "4    0.910920   0.933849  0.022929  0.584643  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fe327476-b685-48e0-8146-e6ea9103e910\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "      <th>state</th>\n",
              "      <th>global_auc</th>\n",
              "      <th>local_auc</th>\n",
              "      <th>diff</th>\n",
              "      <th>rbo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>0.859847</td>\n",
              "      <td>0.808674</td>\n",
              "      <td>-0.051173</td>\n",
              "      <td>0.318968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>0.748746</td>\n",
              "      <td>0.774929</td>\n",
              "      <td>0.026183</td>\n",
              "      <td>0.448413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>0.938669</td>\n",
              "      <td>0.949657</td>\n",
              "      <td>0.010988</td>\n",
              "      <td>0.566429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>0.857509</td>\n",
              "      <td>0.871124</td>\n",
              "      <td>0.013616</td>\n",
              "      <td>0.515595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>0.910920</td>\n",
              "      <td>0.933849</td>\n",
              "      <td>0.022929</td>\n",
              "      <td>0.584643</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fe327476-b685-48e0-8146-e6ea9103e910')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-fe327476-b685-48e0-8146-e6ea9103e910 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-fe327476-b685-48e0-8146-e6ea9103e910');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-4905d707-cb30-4195-8e71-1be986dd3613\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4905d707-cb30-4195-8e71-1be986dd3613')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-4905d707-cb30-4195-8e71-1be986dd3613 button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"global_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07265681537729735,\n        \"min\": 0.7487458178170044,\n        \"max\": 0.9386687306501548,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7487458178170044\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"local_auc\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07614923857120692,\n        \"min\": 0.7749290431280559,\n        \"max\": 0.9496571494094712,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.7749290431280559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"diff\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.031758730769298416,\n        \"min\": -0.0511729405346425,\n        \"max\": 0.02618322531105144,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.02618322531105144\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rbo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10768493309685702,\n        \"min\": 0.318968253968254,\n        \"max\": 0.5846428571428571,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4484126984126983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Head of rbo_plot_data (for RBO):\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "  STATEFP   STATENS     AFFGEOID GEOID STUSPS          NAME LSAD  \\\n",
              "0      24  01714934  0400000US24    24     MD      Maryland   00   \n",
              "1      19  01779785  0400000US19    19     IA          Iowa   00   \n",
              "2      10  01779781  0400000US10    10     DE      Delaware   00   \n",
              "3      39  01085497  0400000US39    39     OH          Ohio   00   \n",
              "4      42  01779798  0400000US42    42     PA  Pennsylvania   00   \n",
              "\n",
              "          ALAND       AWATER  \\\n",
              "0   25151100280   6979966958   \n",
              "1  144661267977   1084180812   \n",
              "2    5045925646   1399985648   \n",
              "3  105828882568  10268850702   \n",
              "4  115884442321   3394589990   \n",
              "\n",
              "                                            geometry         state       rbo  \n",
              "0  MULTIPOLYGON (((2066383.105 -474586.249, 20692...      Maryland  0.318968  \n",
              "1  POLYGON ((275657.697 -241227.881, 279019.846 -...          Iowa  0.448413  \n",
              "2  POLYGON ((2037509.09 -284614.032, 2038073.899 ...      Delaware  0.566429  \n",
              "3  MULTIPOLYGON (((1410627.361 -219480.167, 14130...          Ohio  0.515595  \n",
              "4  POLYGON ((1619194.622 -262054.08, 1617179.991 ...  Pennsylvania  0.584643  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e44e72ea-b3ef-459a-906a-b3693051d8f6\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>STATEFP</th>\n",
              "      <th>STATENS</th>\n",
              "      <th>AFFGEOID</th>\n",
              "      <th>GEOID</th>\n",
              "      <th>STUSPS</th>\n",
              "      <th>NAME</th>\n",
              "      <th>LSAD</th>\n",
              "      <th>ALAND</th>\n",
              "      <th>AWATER</th>\n",
              "      <th>geometry</th>\n",
              "      <th>state</th>\n",
              "      <th>rbo</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>24</td>\n",
              "      <td>01714934</td>\n",
              "      <td>0400000US24</td>\n",
              "      <td>24</td>\n",
              "      <td>MD</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>00</td>\n",
              "      <td>25151100280</td>\n",
              "      <td>6979966958</td>\n",
              "      <td>MULTIPOLYGON (((2066383.105 -474586.249, 20692...</td>\n",
              "      <td>Maryland</td>\n",
              "      <td>0.318968</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>19</td>\n",
              "      <td>01779785</td>\n",
              "      <td>0400000US19</td>\n",
              "      <td>19</td>\n",
              "      <td>IA</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>00</td>\n",
              "      <td>144661267977</td>\n",
              "      <td>1084180812</td>\n",
              "      <td>POLYGON ((275657.697 -241227.881, 279019.846 -...</td>\n",
              "      <td>Iowa</td>\n",
              "      <td>0.448413</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>10</td>\n",
              "      <td>01779781</td>\n",
              "      <td>0400000US10</td>\n",
              "      <td>10</td>\n",
              "      <td>DE</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>00</td>\n",
              "      <td>5045925646</td>\n",
              "      <td>1399985648</td>\n",
              "      <td>POLYGON ((2037509.09 -284614.032, 2038073.899 ...</td>\n",
              "      <td>Delaware</td>\n",
              "      <td>0.566429</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>39</td>\n",
              "      <td>01085497</td>\n",
              "      <td>0400000US39</td>\n",
              "      <td>39</td>\n",
              "      <td>OH</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>00</td>\n",
              "      <td>105828882568</td>\n",
              "      <td>10268850702</td>\n",
              "      <td>MULTIPOLYGON (((1410627.361 -219480.167, 14130...</td>\n",
              "      <td>Ohio</td>\n",
              "      <td>0.515595</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>42</td>\n",
              "      <td>01779798</td>\n",
              "      <td>0400000US42</td>\n",
              "      <td>42</td>\n",
              "      <td>PA</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>00</td>\n",
              "      <td>115884442321</td>\n",
              "      <td>3394589990</td>\n",
              "      <td>POLYGON ((1619194.622 -262054.08, 1617179.991 ...</td>\n",
              "      <td>Pennsylvania</td>\n",
              "      <td>0.584643</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e44e72ea-b3ef-459a-906a-b3693051d8f6')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e44e72ea-b3ef-459a-906a-b3693051d8f6 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e44e72ea-b3ef-459a-906a-b3693051d8f6');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "    <div id=\"df-c7aebd9a-8026-48e5-b07f-5eb7d65bcf8f\">\n",
              "      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c7aebd9a-8026-48e5-b07f-5eb7d65bcf8f')\"\n",
              "                title=\"Suggest charts\"\n",
              "                style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "      </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "      <script>\n",
              "        async function quickchart(key) {\n",
              "          const quickchartButtonEl =\n",
              "            document.querySelector('#' + key + ' button');\n",
              "          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "          quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "          try {\n",
              "            const charts = await google.colab.kernel.invokeFunction(\n",
              "                'suggestCharts', [key], {});\n",
              "          } catch (error) {\n",
              "            console.error('Error during call to suggestCharts:', error);\n",
              "          }\n",
              "          quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "        }\n",
              "        (() => {\n",
              "          let quickchartButtonEl =\n",
              "            document.querySelector('#df-c7aebd9a-8026-48e5-b07f-5eb7d65bcf8f button');\n",
              "          quickchartButtonEl.style.display =\n",
              "            google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "        })();\n",
              "      </script>\n",
              "    </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"display(rbo_plot_data\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"STATEFP\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STATENS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"01779785\",\n          \"01779798\",\n          \"01779781\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AFFGEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"0400000US19\",\n          \"0400000US42\",\n          \"0400000US10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"GEOID\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"19\",\n          \"42\",\n          \"10\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"STUSPS\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"IA\",\n          \"PA\",\n          \"DE\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"NAME\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\",\n          \"Pennsylvania\",\n          \"Delaware\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"LSAD\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ALAND\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 60745510646,\n        \"min\": 5045925646,\n        \"max\": 144661267977,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          144661267977\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"AWATER\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 3932268609,\n        \"min\": 1084180812,\n        \"max\": 10268850702,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          1084180812\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"geometry\",\n      \"properties\": {\n        \"dtype\": \"geometry\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"POLYGON ((275657.69654637086 -241227.88143151856, 279019.84619859175 -235702.49673750956, 282051.226798983 -229917.52368200218, 281698.8216477454 -226580.0111510651, 281535.3074359083 -225030.91974147086, 284729.5270403624 -220797.27297784266, 283023.8116324926 -218838.64019162275, 285134.52468387 -215693.48363135938, 283435.78806872724 -211888.6007942536, 287640.7403857429 -208632.47044363464, 288064.870116656 -206944.52684293807, 288950.8899632009 -203414.89602751934, 287228.6269653699 -200212.8337481372, 285506.9835108709 -191638.76276991115, 281742.35528044036 -191810.79144394974, 279121.1420934999 -188992.35088699934, 278583.05407449586 -187871.44288005552, 276827.692518552 -184212.19659146832, 280702.0086090572 -183053.55851559705, 280975.34692118946 -177790.38135239072, 281015.3648086091 -173511.49523619845, 274925.8624504519 -168368.76440727204, 275541.5846246918 -164396.42173231626, 274245.64900095423 -161017.15720395368, 285982.87139182555 -160524.20725293373, 306508.4697027069 -159604.69102005108, 318215.0012383326 -159064.35034885517, 333697.40153387334 -158317.57210730467, 335833.74564650806 -158211.65165310778, 363823.09421991056 -156689.03631344068, 366428.77947272506 -156535.61578902171, 371793.09360388713 -156216.49509949284, 385704.3966860317 -155368.37434656438, 409876.32128218503 -153935.05549580103, 413125.72255998524 -153735.54892651504, 414709.28665605374 -153636.02217909857, 447830.4767021155 -151466.17903890662, 452033.1774480247 -151178.8099865008, 463505.7440890433 -150410.37493607405, 485798.45150521846 -148859.3856067876, 511698.21292891825 -146895.23442380028, 517468.3805086951 -146443.57108747005, 523846.1731914871 -145935.26636947188, 545414.29900507 -144169.81987836226, 559843.5037312789 -142952.40974838362, 561838.4675192618 -142781.56151022602, 574208.7874505027 -141708.43757701162, 599654.1573244013 -139340.70925728872, 599656.7977841868 -139340.46301699986, 608014.9579629011 -138555.59374451818, 629677.3563552903 -136470.96381807968, 637621.6784648377 -135701.33951618717, 658062.6005213428 -133676.02078266031, 665647.5014194822 -132906.91786340222, 675214.6527489385 -131924.05093729577, 684812.9219408579 -130923.66786732042, 706708.385401355 -128604.10466319714, 706125.8720506745 -134221.81496905303, 708229.9860858254 -137522.90456565647, 709326.3953517346 -139241.79483655933, 709034.6029198273 -142563.09397040887, 713713.1549360956 -146403.56141296655, 717785.08363908 -148330.69049163547, 722461.8038044383 -154501.27171670736, 720469.433915542 -158313.67704291036, 717275.0743850385 -163982.44984093035, 714436.921203251 -168742.59976663574, 715104.4405458434 -174763.03762506033, 715613.9205629188 -179360.6800139574, 717478.1408097743 -184895.925554171, 717904.22507448 -186160.29735783674, 720170.4144302786 -193977.2103951729, 723805.5658775446 -197987.1480380075, 727136.8860756403 -207580.97243079147, 732138.3404244196 -213295.33543264342, 738704.860065601 -216568.38234246545, 742438.9124132534 -217218.54363581902, 746162.0823135074 -217864.6007518538, 755228.44301327 -218996.80500530687, 758939.6094022379 -220715.45783397765, 761840.196468915 -225969.62439408686, 765113.3774461326 -233228.0982484608, 765251.0289063436 -237311.7552864587, 770137.3285562729 -239484.29602536393, 772295.2510093378 -240215.25858382552, 776629.3006809179 -243715.7796187519, 779600.6178933547 -245770.2581297337, 783008.880921492 -248123.91155891964, 785858.3418654117 -251948.11035647325, 785264.1395037663 -256694.72330764128, 788224.719371042 -260711.59279661608, 793784.8853734017 -264087.1252982219, 795740.3130389517 -264905.9631729918, 799798.0991020243 -266602.77857398556, 805164.0743914103 -268806.91191591334, 809499.6873856863 -273077.51563782175, 810167.806684435 -280395.5291217729, 810570.8104602797 -281167.8303718735, 812613.7152910706 -285080.6665807344, 812028.1489161883 -291636.36502215895, 812033.4986403576 -292570.86156391515, 812062.3339979938 -297733.9628581701, 811226.399041664 -302223.2359767486, 811709.9886419694 -305828.6608644357, 807011.7578365691 -309668.3568168309, 806534.7627336008 -310057.74728108314, 801908.1363477954 -314824.0813219525, 801987.4786369152 -316348.5642805532, 802182.6181863621 -320104.07131222176, 800751.2750438956 -323670.5949810938, 801354.5917811018 -330987.0552348317, 799565.3206403244 -333328.52363898145, 795508.9649296186 -335678.00032649544, 792236.8060353686 -340477.306932379, 788016.0700748663 -341417.2078574675, 783264.056516661 -342326.15782139136, 779731.7166576681 -346240.08617647446, 773269.4154827066 -350372.30493633234, 766250.1660108496 -351375.06435416586, 759604.269680112 -352644.2862705199, 755182.9814604042 -355976.21254406584, 751594.4328516916 -355568.33075246954, 746609.4637876501 -356839.16708657227, 744159.1283938275 -363209.62604513316, 743964.0663241196 -366528.06886336044, 743815.8922678481 -367140.98417969275, 743796.729325275 -367220.23822206305, 741467.2551403068 -376833.06882366154, 744599.6667783437 -380477.71401817113, 748478.5846192469 -385460.4679028798, 752147.720169564 -385458.1421048703, 756133.6744370677 -390782.76465932664, 756999.2512326842 -394981.4817988193, 757063.7849720134 -395294.46832342504, 758206.0168482699 -400833.0626253527, 758396.6442161102 -408115.66182872263, 756115.2667129762 -413058.8059567363, 751683.2476161292 -418446.24836012843, 748191.0535466684 -424118.63462363684, 748776.131347041 -428685.72957577417, 747392.907970551 -434940.154193842, 747479.0651399036 -437799.74217229796, 747568.7105264604 -440784.7455725482, 742547.0841369249 -445205.4937991592, 742428.9710114481 -445309.3581578324, 737312.6678152734 -445734.45245131815, 729887.4424426047 -449308.02207943413, 727334.3456606115 -453033.38769436465, 726170.4072964905 -458530.3165902005, 728672.7425464249 -460959.69973910553, 728310.3690685489 -467527.1644640461, 729486.9455230234 -473332.5866865613, 725802.7924912673 -476049.73904848273, 718918.5639851592 -474118.5287284036, 716809.6268982881 -470881.0357888432, 712740.8841723909 -468149.838268357, 708574.6158543421 -464209.2733056495, 707256.930315876 -459977.67070645315, 702760.4059561582 -459109.4690490544, 701251.5057738514 -456136.4865830522, 698359.1172330404 -453650.3081982712, 697207.2449814179 -452659.4563104641, 679638.8936252036 -455242.7259563273, 679318.5526706917 -455284.13356451964, 659495.4101339915 -457816.89368108235, 645156.739015405 -459531.35290157254, 636523.8193251846 -460548.95017519844, 621083.0870355167 -462432.08636246744, 616991.3269501667 -462925.21185952926, 614646.8970401911 -463158.48784871865, 595571.4329864623 -465026.6533773221, 582507.524856342 -466572.2178798311, 579275.5802724941 -466950.70183203986, 561652.2903701774 -468658.9005376216, 559216.8852807326 -468868.3733278996, 543858.0859369528 -470169.5206268119, 540453.1518455824 -470453.3286243319, 525564.5229979681 -471813.9956514549, 519962.2959320747 -472317.6159329411, 505278.87410313793 -473702.8100493373, 498919.0540547554 -474293.01805388497, 487031.4939659493 -475233.6612113033, 480421.0444463713 -475747.8623848414, 466898.79506086855 -476731.0592500906, 461617.57945331396 -477107.8624697158, 453336.46629812743 -477538.36743625277, 437476.74995566567 -478335.2653943199, 429465.0895316241 -478699.5482112757, 416463.98661454406 -479271.0334508587, 405208.74187530787 -479768.4052136021, 393954.6427376279 -480247.49896510487, 390718.1704754351 -480378.41304571816, 377272.8373301775 -480906.1433173554, 357644.4771819223 -481611.94597539253, 358980.7038539967 -479523.5564899898, 355901.22509120224 -474126.11959311727, 350338.80702018243 -471143.89343996247, 346458.7644877068 -465363.5244141936, 350798.05713874975 -459945.6716108822, 350786.52362104 -459860.73643869825, 349859.0319916024 -453027.2750855455, 352207.41113048524 -448336.47844108817, 351472.88471494964 -447119.752544236, 349728.96528921305 -444229.21377892705, 350263.5494700089 -438896.86347919935, 346872.2932259055 -434056.49213600066, 346773.39129283343 -430116.6337829499, 346687.6724186094 -426708.21301617235, 346060.2147201351 -422154.98175065394, 346436.5532694196 -418173.10317439155, 346719.3032220897 -415176.3210001863, 342311.2041965078 -415697.37993193953, 342256.250462572 -414933.80229770934, 341883.38739563554 -409752.7273982281, 343441.4840836249 -405188.30795765144, 340241.4197301162 -400462.3433629693, 339728.17694292613 -395156.24495382427, 339743.5329040606 -392941.3417627018, 339793.56220414327 -385617.09294683975, 334688.8083229054 -384308.8013294464, 333573.84348989866 -380232.3278719024, 332459.8223873302 -376155.57752940507, 326270.88733576285 -378212.7983200668, 325160.5851804205 -374605.33381107607, 322709.1486543715 -368888.40557557443, 322978.45311814867 -362748.1843799185, 323231.9928990823 -361850.0926723182, 324684.98030234984 -356697.6472276067, 326231.10030069604 -348740.6813926145, 322396.806395017 -343654.50492229, 320700.65747267636 -340867.8975028118, 317808.4072847263 -336110.639483703, 319675.34382918605 -328835.9988214633, 311915.07544121606 -323851.94008842146, 307728.5875927707 -321307.01578304, 307730.0758212227 -313921.85829335253, 300975.3863820559 -308303.1388121895, 301610.4148085367 -302927.5964281048, 301664.17526320874 -302471.92364999664, 301468.2223553475 -297373.7588715253, 300078.98161461245 -295645.07383107155, 295204.25911785 -289570.64427771966, 294542.12089214666 -281420.7914610749, 296800.1196180875 -275667.3038161731, 291402.1660532685 -272683.25631976797, 288696.5934432257 -270690.1470872813, 287390.11609133385 -269890.0581135436, 288520.28163631185 -265523.52908181975, 288244.49686993693 -264951.556094618, 284051.0843031065 -256242.71934759905, 278539.8873814614 -251255.22396295838, 275668.6080355302 -247210.23792375156, 275657.69654637086 -241227.88143151856))\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"state\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"Iowa\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"rbo\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.10768493309685702,\n        \"min\": 0.318968253968254,\n        \"max\": 0.5846428571428571,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.4484126984126983\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9238ce34"
      },
      "source": [
        "## Convert data manipulation and analysis\n",
        "\n",
        "### Subtask:\n",
        "Convert the data manipulation and analysis steps, including filtering, transforming spatial data, joining dataframes, grouping, and slicing, from R to Python using libraries like `geopandas` and `pandas`.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "c848a92c"
      },
      "source": [
        "## Convert plotting code\n",
        "\n",
        "### Subtask:\n",
        "Translate the R code for generating plots using `ggplot2` to Python using libraries like `matplotlib` and `seaborn`, or potentially `plotly` for interactive plots.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "977b7546"
      },
      "source": [
        "## Convert file saving\n",
        "\n",
        "### Subtask:\n",
        "Convert the R code for saving the plots to local files to Python.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9aebd9e3"
      },
      "source": [
        "**Reasoning**:\n",
        "Create the directory for saving plots if it doesn't exist and then save the three generated plots to their specified file paths using `plt.savefig()` with the given dimensions and DPI.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7fbce852"
      },
      "source": [
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create the directory for plots if it doesn't exist\n",
        "output_dir = \"updated_model/plots/\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Assuming the plots have been generated and assigned to variables\n",
        "# For demonstration purposes, we will create placeholder plots.\n",
        "# In a real scenario, these would be the actual plots generated from the data.\n",
        "fig1, ax1 = plt.subplots(1, 1, figsize=(8, 6))\n",
        "fig2, ax2 = plt.subplots(1, 1, figsize=(8, 6))\n",
        "fig3, ax3 = plt.subplots(1, 1, figsize=(8, 6))\n",
        "\n",
        "\n",
        "# Save the first plot (Top Feature Importance Map)\n",
        "plt.figure(fig1.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_top_local_features2.png\"), dpi=300)\n",
        "plt.close(fig1) # Close the figure to free memory\n",
        "\n",
        "# Save the second plot (AUC Improvement Map)\n",
        "plt.figure(fig2.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_auc_improvement.png\"), dpi=300)\n",
        "plt.close(fig2) # Close the figure to free memory\n",
        "\n",
        "# Save the third plot (Ranked-Biased Overlap Map)\n",
        "plt.figure(fig3.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_rbo.png\"), dpi=300)\n",
        "plt.close(fig3) # Close the figure to free memory"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "263a3836"
      },
      "source": [
        "**Reasoning**:\n",
        "The error indicates that `plt.savefig()` does not accept `width` and `height` as arguments directly. These should be controlled by the `figsize` argument when creating the figure. The DPI argument is correct. Need to fix the `savefig` calls to remove `width` and `height`.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jSfsz3Lmgi1a"
      },
      "source": [
        "import os\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Create the directory for plots if it doesn't exist\n",
        "output_dir = \"updated_model/plots/\"\n",
        "os.makedirs(output_dir, exist_ok=True)\n",
        "\n",
        "# Assuming the plots have been generated and assigned to variables\n",
        "# For demonstration purposes, we will create placeholder plots with the correct figsize.\n",
        "# In a real scenario, these would be the actual plots generated from the data.\n",
        "fig1, ax1 = plt.subplots(1, 1, figsize=(8, 6))\n",
        "fig2, ax2 = plt.subplots(1, 1, figsize=(8, 6))\n",
        "fig3, ax3 = plt.subplots(1, 1, figsize=(8, 6))\n",
        "\n",
        "\n",
        "# Save the first plot (Top Feature Importance Map)\n",
        "plt.figure(fig1.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_top_local_features2.png\"), dpi=300)\n",
        "plt.close(fig1) # Close the figure to free memory\n",
        "\n",
        "# Save the second plot (AUC Improvement Map)\n",
        "plt.figure(fig2.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_auc_improvement.png\"), dpi=300)\n",
        "plt.close(fig2) # Close the figure to free memory\n",
        "\n",
        "# Save the third plot (Ranked-Biased Overlap Map)\n",
        "plt.figure(fig3.number) # Make the figure current before saving\n",
        "plt.savefig(os.path.join(output_dir, \"map_rbo.png\"), dpi=300)\n",
        "plt.close(fig3) # Close the figure to free memory"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "10bc341e"
      },
      "source": [
        "## Summary:\n",
        "\n",
        "### Data Analysis Key Findings\n",
        "\n",
        "*   The initial step successfully identified the Python equivalents for the R libraries `sf` (`geopandas`), `dplyr` (`pandas`), and `ggplot2` (`matplotlib`, `seaborn`, or `plotnine`).\n",
        "*   The subsequent steps to load and prepare the data (shapefile and CSVs) and perform data manipulation and analysis failed due to the absence of the necessary data files (`cb_2018_us_state_20m.zip`, `feature_importance_by_state.csv`, and `model_performance_by_state.csv`) in the execution environment.\n",
        "*   The step to convert the plotting code also failed because the required dataframes could not be created due to the missing data files.\n",
        "*   Despite the data loading and processing failures, the final step successfully converted the R code for saving plots to Python using `matplotlib.pyplot.savefig()`, correctly handling the output directory creation and specifying the DPI and figure size.\n",
        "\n",
        "### Insights or Next Steps\n",
        "\n",
        "*   The primary next step is to ensure the required data files (`cb_2018_us_state_20m.zip`, `feature_importance_by_state.csv`, and `model_performance_by_state.csv`) are available in the execution environment to allow the data loading, manipulation, analysis, and plotting steps to proceed.\n",
        "*   Once the data is available, re-execute the data loading, manipulation, analysis, and plotting steps, translating the R code logic into Python using `geopandas`, `pandas`, `matplotlib`, and `seaborn`.\n"
      ]
    }
  ]
}